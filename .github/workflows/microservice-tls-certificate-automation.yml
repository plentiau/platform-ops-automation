name: Renew Microservice TLS Certificates

on:
  schedule:
    - cron: "00 12 * * MON"
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Choose the environment to check microservice certificate
        options:
          - Production
          - Test

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: false

permissions:
  id-token: write
  contents: read

env:
  ZEROSSL_API_KEY: ${{ secrets.ZEROSSL_API_KEY }}
  ZEROSSL_EMAIL: ${{ vars.ZEROSSL_EMAIL }}
  NOTIFICATION_SLACK_CHANNEL_WEBHOOK: ${{ secrets.NOTIFICATION_SLACK_CHANNEL_WEBHOOK }}
  NOTIFICATION_SLACK_CHANNEL_NAME: "dev-team-devops"
  BUILD_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
  SLACK_NOTIFIER_CONTAINER: 519527725796.dkr.ecr.ap-southeast-2.amazonaws.com/slack-notifier:latest
  GITHUB_ACTION_ECR_ROLE_ARN: arn:aws:iam::519527725796:role/github-actions-ecr-role
  LEGACY_PRODUCTION_ROLE_ARN: arn:aws:iam::519527725796:role/pipeline-tls-automation-role
  PLENTIAU_TEST_ROLE_ARN: arn:aws:iam::939087296411:role/pipeline-tls-automation-role
  PLENTIAU_PRODUCTION_ROLE_ARN: arn:aws:iam::338608670045:role/pipeline-tls-automation-role
  PLENTIAU_TEST_HOSTED_ZONE_ID: Z0729871RY2BG34RISU7
  PLENTIAU_PRODUCTION_HOSTED_ZONE_ID: Z09985722XYKWP0YZWW2I

defaults:
  run:
    working-directory: "Microservice TLS Certificates"

jobs:
  check-certificate-status:
    runs-on: ubuntu-latest
    if: github.ref_name == 'master'
    name: Check Certificate Status
    env:
      ENVIRONMENT: ${{ inputs.environment }}
    outputs:
      expired_certificates_test: ${{ steps.alert.outputs.expired_certificates_test }}
      expired_certificates_production: ${{ steps.alert.outputs.expired_certificates_production }}
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - uses: aws-actions/configure-aws-credentials@v3
        name: Config AWS credential
        with:
          role-to-assume: ${{ env.LEGACY_PRODUCTION_ROLE_ARN }}
          aws-region: ap-southeast-2

      - name: Check certificate
        id: check-certificates
        continue-on-error: true
        run: python get_zerossl_certificate.py

      - name: Notify Slack if failed
        if: steps.check-certificates.outcome == 'failure'
        uses: archive/github-actions-slack@v2.0.0
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-text: "Failed to check certificates!"
          slack-optional-icon_emoji: ":siren-light:"
          slack-optional-username: "Platform Ops Automation"

      - uses: aws-actions/configure-aws-credentials@v3
        name: Config AWS credential
        if: steps.check-certificates.outcome == 'success'
        with:
          role-to-assume: ${{ env.GITHUB_ACTION_ECR_ROLE_ARN }}
          aws-region: ap-southeast-2

      - name: Login to Amazon ECR
        if: steps.check-certificates.outcome == 'success'
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: 519527725796

      - name: Alert for expired certificates
        id: alert
        if: steps.check-certificates.outcome == 'success'
        run: python send_alert.py

      - name: Upload expired certificates artifact
        if: steps.check-certificates.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: expired-certificates
          path: "Microservice TLS Certificates/expired_certificates"

  renew-expired-test-certificate:
    runs-on: ubuntu-latest
    if: github.ref_name == 'master' && needs.check-certificate-status.outputs.expired_certificates_test == 'true'
    name: Renew Expired Certificates on Test
    environment: plentiau-test
    needs: [check-certificate-status]
    env:
      ENVIRONMENT: Test
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Download expired certificates artifact
        uses: actions/download-artifact@v4
        with:
          name: expired-certificates
          path: "Microservice TLS Certificates/expired_certificates"

      - uses: aws-actions/configure-aws-credentials@v3
        name: Config AWS credential for plentiau-test
        with:
          role-to-assume: ${{ env.PLENTIAU_TEST_ROLE_ARN }}
          aws-region: ap-southeast-2

      - name: Renew Certificates
        id: renew-certificates
        continue-on-error: true
        run: python renew_zerossl_certificate.py

      - name: Notify Slack if failed
        if: steps.renew-certificates.outcome == 'failure'
        uses: archive/github-actions-slack@v2.0.0
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-text: "Failed to renew certificate for Test!"
          slack-optional-icon_emoji: ":siren-light:"
          slack-optional-username: "Platform Ops Automation"

      - uses: aws-actions/configure-aws-credentials@v3
        if: steps.renew-certificates.outcome == 'success'
        name: Config AWS credential for legacy-production
        with:
          role-to-assume: ${{ env.LEGACY_PRODUCTION_ROLE_ARN }}
          aws-region: ap-southeast-2
          role-duration-seconds: 21600 # 6 hours

      - name: Install Certificates
        if: steps.renew-certificates.outcome == 'success'
        id: install-certificates
        continue-on-error: true
        run: python install_certificate.py

      - name: Notify Slack if failed
        if: steps.install-certificates.outcome == 'failure'
        uses: archive/github-actions-slack@v2.0.0
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-text: "Failed to renew certificate for Test!"
          slack-optional-icon_emoji: ":siren-light:"
          slack-optional-username: "Platform Ops Automation"

      - name: Notify Slack if success
        if: steps.install-certificates.outcome == 'success'
        uses: archive/github-actions-slack@v2.0.0
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-text: "Successfully rotated expired certificates!"
          slack-optional-icon_emoji: ":ring_buoy:"
          slack-optional-username: "Platform Ops Automation"

  renew-expired-production-certificate:
    name: Renew Expired Certificates on Production
    runs-on: ubuntu-latest
    if: github.ref_name == 'master' && needs.check-certificate-status.outputs.expired_certificates_production == 'true' && ( needs.renew-expired-test-certificate.result == 'skipped' || needs.renew-expired-test-certificate.result == 'success' )
    environment: plentiau-production
    needs: [renew-expired-test-certificate]
    env:
      ENVIRONMENT: Production
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Download expired certificates artifact
        uses: actions/download-artifact@v4
        with:
          name: expired-certificates
          path: "Microservice TLS Certificates/expired_certificates"

      - uses: aws-actions/configure-aws-credentials@v3
        name: Config AWS credential for plentiau-production
        with:
          role-to-assume: ${{ env.PLENTIAU_PRODUCTION_ROLE_ARN }}
          aws-region: ap-southeast-2

      - name: Renew Certificates
        id: renew-certificates
        continue-on-error: true
        run: python renew_zerossl_certificate.py

      - name: Notify Slack if failed
        if: steps.renew-certificates.outcome == 'failure'
        uses: archive/github-actions-slack@v2.0.0
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-text: "Failed to renew certificate for Production!"
          slack-optional-icon_emoji: ":siren-light:"
          slack-optional-username: "Platform Ops Automation"

      - uses: aws-actions/configure-aws-credentials@v3
        if: steps.renew-certificates.outcome == 'success'
        name: Config AWS credential for legacy-production
        with:
          role-to-assume: ${{ env.LEGACY_PRODUCTION_ROLE_ARN }}
          aws-region: ap-southeast-2
          role-duration-seconds: 21600 # 6 hours

      - name: Install Certificates
        if: steps.renew-certificates.outcome == 'success'
        id: install-certificates
        continue-on-error: true
        run: python install_certificate.py

      - name: Notify Slack if failed
        if: steps.install-certificates.outcome == 'failure'
        uses: archive/github-actions-slack@v2.0.0
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-text: "Failed to renew certificate for Production!"
          slack-optional-icon_emoji: ":siren-light:"
          slack-optional-username: "Platform Ops Automation"

      - name: Notify Slack if success
        if: steps.install-certificates.outcome == 'success'
        uses: archive/github-actions-slack@v2.0.0
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-text: "Successfully rotated expired certificates!"
          slack-optional-icon_emoji: ":ring_buoy:"
          slack-optional-username: "Platform Ops Automation"